import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.context.annotation.Bean;
import org.springframework.boot.CommandLineRunner;

import jakarta.persistence.*;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

// Main Spring Boot Application
@SpringBootApplication
public class TestTrackerApplication {

    public static void main(String[] args) {
        SpringApplication.run(TestTrackerApplication.class, args);
    }

    // Initialize some sample data on startup (optional)
    @Bean
    CommandLineRunner initData(StudentRepository repository) {
        return args -> {
            repository.save(new Student("Alice", "Math Test", 85));
            repository.save(new Student("Bob", "Science Test", 90));
        };
    }
}

// Entity Class: Represents a Student with their test details
@Entity
class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-generate IDs
    private Long id;
    private String name;     // Student's name
    private String testName; // Name of the test
    private int score;       // Test score

    // Default constructor (required by JPA)
    public Student() {}

    // Parameterized constructor for convenience
    public Student(String name, String testName, int score) {
        this.name = name;
        this.testName = testName;
        this.score = score;
    }

    // Getters and Setters (required for accessing fields)
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getTestName() { return testName; }
    public void setTestName(String testName) { this.testName = testName; }

    public int getScore() { return score; }
    public void setScore(int score) { this.score = score; }
}

// Repository Interface: Handles database operations
interface StudentRepository extends JpaRepository<Student, Long> {}

// REST Controller: Defines API Endpoints for the application
@RestController
@RequestMapping("/api/students") // Base URL for all student-related endpoints
@CrossOrigin(origins = "http://localhost:3000") // Allow React frontend requests
class StudentController {

    @Autowired
    private StudentRepository studentRepository;

    // Endpoint: Get all students
    @GetMapping
    public List<Student> getAllStudents() {
        return studentRepository.findAll();
    }

    // Endpoint: Add a new student
    @PostMapping
    public Student addStudent(@RequestBody Student student) {
        return studentRepository.save(student);
    }

    // Endpoint: Get details of a student by ID
    @GetMapping("/{id}")
    public Student getStudentById(@PathVariable Long id) {
        return studentRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Student not found"));
    }

    // Endpoint: Delete a student by ID
    @DeleteMapping("/{id}")
    public void deleteStudent(@PathVariable Long id) {
        studentRepository.deleteById(id);
    }
}

